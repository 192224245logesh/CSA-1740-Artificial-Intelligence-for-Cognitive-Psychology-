import heapq


cities = [0, 1, 2, 3]
dis = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]


start = cities[0]
goal = cities[0]


open_set = []
heapq.heappush(open_set, (0, start, [start], 0))  # (f_score, current_city, path, g_score)


while open_set:
    # Pop the city with the lowest f_score
    _, current, path, g = heapq.heappop(open_set)
    

    if len(path) == len(cities):
        total_distance = g + dis[current][start]  # Add distance to return to start
        print("Shortest path:", path + [start])
        print("Minimum distance:", total_distance)
        break
    

    for neighbor in cities:
        if neighbor not in path:
            g_score = g + dis[current][neighbor]
            f_score = g_score + dis[neighbor][goal]  # Heuristic cost estimate
            heapq.heappush(open_set, (f_score, neighbor, path + [neighbor],g_score))

